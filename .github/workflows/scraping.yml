# .github/workflows/deploy.yml
name: Scraping TFD Meta Data to external repository

on:
  # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on
  push:
    branches: [ "main" ]
  # push:
  #   tags:
  #     - "*"
# on:
#   schedule:
#     - cron:  '*/5 * * * *' # Ï£ºÍ∏∞Ï†ÅÏúºÎ°ú Ïã§ÌñâÌïòÍ∏∞ ÏúÑÌïú Ïä§ÏºÄÏ§ÑÎßÅ - cron ÏÑ§Ï†ï
jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Scraping TFD Meta
        run: npm run scraping

      - name: Deploy to external repository
        uses: cpina/github-action-push-to-another-repository@main
        env:
          # üèóÔ∏è <internal repository>, run GitHub Action.
          # üéÅ <external repository>, receiving Artifacts.
          #
          # Way 1: using Personal Access Token
          # @see https://cpina.github.io/push-to-another-repository-docs/setup-using-personal-access-token.html#setup-personal-access-token
          # 1.1 Generate Personal Access Token: <external repository>/<Avatar>/Settings/Developer settings/Personal access tokens/Generate new token
          #     Select `No expiration` and Check `‚úÖÔ∏è repo    Full control of private repositories`, Generate and then Copy the Token
          # 1.2 Then make the token available to the GitHub Action: <internal repository>/Settings/Secrets/Actions/New repository secret
          #     Name: EXTERNAL_REPOSITORY_PERSONAL_ACCESS_TOKEN, Value Paste the Token
          API_TOKEN_GITHUB: ${{ secrets.EXTERNAL_REPOSITORY_PERSONAL_ACCESS_TOKEN }}
          # Way 2: using SSH deploy keys
          # @see https://cpina.github.io/push-to-another-repository-docs/setup-using-ssh-deploy-keys.html#setup-ssh-deploy-keys
          # 2.1 Generate an SSH key in terminal (Leave the passphrase empty)
          # 2.2 Add public key in the external repository: <external repository>/Settings/Deploy keys/Add deploy key
          #     Name: DEPLOY_PUBLIC_KEY, Value Paste the public key. Enable "‚úÖÔ∏è Allow write access"
          # 2.3 Add private key in the source repository: <external repository>/Settings/Secrets/Actions/New repository secret
          #     Name: DEPLOY_PRIVATE_KEY, Value Paste the private key.
          # SSH_DEPLOY_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
        with:
          # GitHub Action output files
          source-directory: dist/
          destination-github-username: drt0927
          destination-repository-name: firdic-static
          commit-message: ${{ github.event.commits[0].message }}
          user-email: drt_0927@naver.com
          # It defaults to `main`
          target-branch: main

      - name: Test get variable exported by push-to-another-repository
        run: echo $DESTINATION_CLONED_DIRECTORY